service: kuka-js

custom:
  serverless-offline:
    httpPort: 4000
  customDomain:
    domainName: ${env:KUKA_DOMAIN}
    basePath: user
    endpointType: edge

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ${env:REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: ${env:DYNAMODB_ARN}
functions:
  register:
    handler: handler.register
    events:
      - http:
          path: register
          method: post

  login:
    handler: handler.login
    events:
      - http:
          path: login
          method: post

  verify:
    handler: handler.verify
    events:
      - http:
          path: verify/{id}
          method: post
          request:
            parameters:
              paths:
                id: true

  reset:
    handler: handler.reset
    events:
      - http:
          path: reset
          method: post

  password:
    handler: handler.password
    events:
      - http:
          path: password
          method: put

  getScopes:
    handler: handler.getScopes
    events:
      - http:
          path: scopes
          method: get
          authorizer: authGetScopes

  addScope:
    handler: handler.addScope
    events:
      - http:
          path: scopes
          method: post
          authorizer: authAddScope

  removeScope:
    handler: handler.removeScope
    events:
      - http:
          path: scopes/{scopeName}
          method: delete
          authorizer: authRemoveScope
          request:
            parameters:
              paths:
                scopeName: true

  getUserList:
    handler: handler.getUserList
    events:
      - http:
          path: list
          method: get
          authorizer: authGetUserList

  getUserData:
    handler: handler.getUser
    events:
      - http:
          path: /
          method: get
          authorizer: authGetUserData

  refreshToken:
    handler: handler.refreshToken
    events:
      - http:
          path: token
          method: put

  deleteuser:
    handler: handler.deleteUser
    events:
      - http:
          path: /
          method: delete
          authorizer: authDeleteUser

  lockUser:
    handler: handler.lockUser
    events:
      - http:
          path: lock
          method: put
          authorizer: authLockUser

  authGetScopes:
    handler: Auth.getScopes

  authAddScope:
    handler: Auth.addScope

  authRemoveScope:
    handler: Auth.removeScope

  authGetUserList:
    handler: Auth.getUserList

  authGetUserData:
    handler: Auth.getUserData

  authDeleteUser:
    handler: Auth.deleteUser

  authLockUser:
    handler: Auth.lockUser
